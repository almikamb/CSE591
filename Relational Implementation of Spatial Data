

CREATE EXTENSION postgis;

CREATE EXTENSION postgis_topology;
-- Enable PostGIS Advanced 3D 
-- and other geoprocessing algorithms
CREATE EXTENSION postgis_sfcgal;
-- fuzzy matching needed for Tiger
CREATE EXTENSION fuzzystrmatch;
-- rule based standardizer
CREATE EXTENSION address_standardizer;
-- example rule data set
CREATE EXTENSION address_standardizer_data_us;
-- Enable US Tiger Geocoder
CREATE EXTENSION postgis_tiger_geocoder;
-- routing functionality
CREATE EXTENSION pgrouting;
-- spatial foreign data wrappers
CREATE EXTENSION ogr_fdw;

-- LIDAR support
CREATE EXTENSION pointcloud;
-- LIDAR Point cloud patches to geometry type cases
CREATE EXTENSION pointcloud_postgis;

--------------------------------------------------------------------------------------------------------------------

create table tweets_elections(id SERIAL,tweet json);

create table tweets_elections_nongeo(id SERIAL,tweet json);

copy tweets_elections(tweet) 
    from 'C:\Program Files (x86)\PostgreSQL\geotagged_elections_tweets_2.json' 
    csv quote e'\x01' delimiter e'\x02';

copy tweets_elections_nongeo(tweet) 
    from 'C:\Program Files (x86)\PostgreSQL\ALl_elections_tweets_.json' 
    csv quote e'\x01' delimiter e'\x02';

----------------------------------------------------------------------------------------------------------------------
drop table tweets_relational_elections

select id, cast(tweet->>'Latitude' as text) as Latitude,cast(tweet->>'Longitude' as text) as Longitude, cast(tweet->>'Text' as text) as text 
into tweets_relational_elections from tweets_elections

ALTER TABLE tweets_relational_elections
  ADD COLUMN geom geography(Point,4326); 


UPDATE tweets_relational_elections SET geom = ST_PointFromText ('POINT(' || longitude || ' ' || latitude || ')' , 4326 ) ;

CREATE INDEX idnx_elections_geom ON tweets_relational_elections USING GIST ( geom ); 

--------------------------- KNN Query --------------------------------------------------------

SELECT *,ST_Distance(geom,ST_GeographyFromText('POINT(-111.9211234 33.4212026)')) 
FROM tweets_relational_elections
ORDER BY
tweets_relational_elections.geom <->'SRID=4326;POINT(-111.9211234 33.4212026 )'::geography
limit 10;

-------------------------- Range Query --------------------------------------------------------

SELECT *,ST_Distance(geom,ST_GeographyFromText('POINT(-111.9211234 33.4212026)')) 
FROM tweets_relational_elections
WHERE ST_Distance(geom,ST_GeographyFromText('POINT(-111.9211234 33.4212026)')) < 100000
ORDER BY
tweets_relational_elections.geom <->'SRID=4326;POINT(-111.9211234 33.4212026 )'::geography

--------------------------- KNN + Textual ----------------------------------------------------

SELECT *,ST_Distance(geom,ST_GeographyFromText('POINT(-111.9211234 33.4212026)')) 
FROM tweets_relational_elections
WHERE text Ilike '%trump%'
ORDER BY
tweets_relational_elections.geom <->'SRID=4326;POINT(-111.9211234 33.4212026 )'::geography
limit 10;
--------------------------- Range + Textual --------------------------------------------------

SELECT *,ST_Distance(geom,ST_GeographyFromText('POINT(-111.9211234 33.4212026)')) 
FROM tweets_relational_elections
WHERE ST_Distance(geom,ST_GeographyFromText('POINT(-111.9211234 33.4212026)')) < 100000 and text Ilike '%trump%'
ORDER BY
tweets_relational_elections.geom <->'SRID=4326;POINT(-111.9211234 33.4212026 )'::geography

---------------------------------------------------------------------------------------------------------------------------------------------------
--miscellaneous queries for sample testing

SELECT table_schema,table_name FROM information_schema.tables where table_name = 'tweets_relational_elections'

SELECT * FROM information_schema.columns where table_name = 'tweets_relational_elections'


SELECT ST_Distance(
  ST_GeographyFromText('POINT(-111.9211234 33.4212026 )'), 
  ST_GeographyFromText('POINT(25.6002326 -33.9363287 )')     
  );

--------------------------------------------------------------------------------------------------------------------------------------------------
